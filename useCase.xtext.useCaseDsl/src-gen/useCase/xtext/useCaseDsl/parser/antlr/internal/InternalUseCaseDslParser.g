/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalUseCaseDslParser;

options {
	tokenVocab=InternalUseCaseDslLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package useCase.xtext.useCaseDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;

}

@members {

 	private UseCaseDslGrammarAccess grammarAccess;

    public InternalUseCaseDslParser(TokenStream input, UseCaseDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "UseCase";
   	}

   	@Override
   	protected UseCaseDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;

// Rule UseCase
ruleUseCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=UC
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCaseAccess().getUCKeyword_0());
		}
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getUseCaseAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getUseCaseAccess().getColonKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getUseCaseAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getMainflowMainFlowParserRuleCall_4_0());
				}
				lv_mainflow_4_0=ruleMainFlow
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					set(
						$current,
						"mainflow",
						lv_mainflow_4_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.MainFlow");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMainFlow
entryRuleMainFlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMainFlowRule()); }
	iv_ruleMainFlow=ruleMainFlow
	{ $current=$iv_ruleMainFlow.current; }
	EOF;

// Rule MainFlow
ruleMainFlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMainFlowAccess().getMainFlowAction_0(),
					$current);
			}
		)
		otherlv_1=MainFlow
		{
			newLeafNode(otherlv_1, grammarAccess.getMainFlowAccess().getMainFlowKeyword_1());
		}
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getMainFlowAccess().getColonKeyword_2());
		}
		this_BEGIN_3=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_3, grammarAccess.getMainFlowAccess().getBEGINTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMainFlowAccess().getStepsStepParserRuleCall_4_0());
				}
				lv_steps_4_0=ruleStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMainFlowRule());
					}
					add(
						$current,
						"steps",
						lv_steps_4_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.Step");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_END_5=RULE_END
		{
			newLeafNode(this_END_5, grammarAccess.getMainFlowAccess().getENDTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStepRule()); }
	iv_ruleStep=ruleStep
	{ $current=$iv_ruleStep.current; }
	EOF;

// Rule Step
ruleStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStepAccess().getStepAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStepAccess().getTypeUserStepParserRuleCall_1_0_0());
					}
					lv_type_1_1=ruleUserStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStepRule());
						}
						set(
							$current,
							"type",
							lv_type_1_1,
							"useCase.xtext.useCaseDsl.UseCaseDsl.UserStep");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getStepAccess().getTypeSystemStepParserRuleCall_1_0_1());
					}
					lv_type_1_2=ruleSystemStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStepRule());
						}
						set(
							$current,
							"type",
							lv_type_1_2,
							"useCase.xtext.useCaseDsl.UseCaseDsl.SystemStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStepAccess().getSentenceSentenceParserRuleCall_2_0());
				}
				lv_sentence_2_0=ruleSentence
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStepRule());
					}
					set(
						$current,
						"sentence",
						lv_sentence_2_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.Sentence");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=Semicolon
		{
			newLeafNode(otherlv_3, grammarAccess.getStepAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleUserStep
entryRuleUserStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUserStepRule()); }
	iv_ruleUserStep=ruleUserStep
	{ $current=$iv_ruleUserStep.current; }
	EOF;

// Rule UserStep
ruleUserStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUserStepAccess().getUserStepAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_INT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getUserStepAccess().getNameINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUserStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=FullStop
		{
			newLeafNode(otherlv_2, grammarAccess.getUserStepAccess().getFullStopKeyword_2());
		}
		otherlv_3=User
		{
			newLeafNode(otherlv_3, grammarAccess.getUserStepAccess().getUserKeyword_3());
		}
	)
;

// Entry rule entryRuleSystemStep
entryRuleSystemStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemStepRule()); }
	iv_ruleSystemStep=ruleSystemStep
	{ $current=$iv_ruleSystemStep.current; }
	EOF;

// Rule SystemStep
ruleSystemStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSystemStepAccess().getSystemStepAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_INT
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemStepAccess().getNameINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=FullStop
		{
			newLeafNode(otherlv_2, grammarAccess.getSystemStepAccess().getFullStopKeyword_2());
		}
		otherlv_3=KW_System
		{
			newLeafNode(otherlv_3, grammarAccess.getSystemStepAccess().getSystemKeyword_3());
		}
	)
;

// Entry rule entryRuleSentence
entryRuleSentence returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current.getText(); }
	EOF;

// Rule Sentence
ruleSentence returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getSentenceAccess().getSTRINGTerminalRuleCall());
		}
	)*
;
