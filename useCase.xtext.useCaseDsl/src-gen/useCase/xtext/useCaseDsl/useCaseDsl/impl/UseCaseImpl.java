/**
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.useCaseDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import useCase.xtext.useCaseDsl.useCaseDsl.Extension;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCase;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseStep;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getNumber <em>Number</em>}</li>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getMainflow <em>Mainflow</em>}</li>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getSteps <em>Steps</em>}</li>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getDeclareofflow <em>Declareofflow</em>}</li>
 *   <li>{@link useCase.xtext.useCaseDsl.useCaseDsl.impl.UseCaseImpl#getAlternativeflows <em>Alternativeflows</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseCaseImpl extends MinimalEObjectImpl.Container implements UseCase
{
  /**
   * The default value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected static final int NUMBER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected int number = NUMBER_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getMainflow() <em>Mainflow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainflow()
   * @generated
   * @ordered
   */
  protected static final String MAINFLOW_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMainflow() <em>Mainflow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMainflow()
   * @generated
   * @ordered
   */
  protected String mainflow = MAINFLOW_EDEFAULT;

  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected EList<UseCaseStep> steps;

  /**
   * The default value of the '{@link #getDeclareofflow() <em>Declareofflow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclareofflow()
   * @generated
   * @ordered
   */
  protected static final String DECLAREOFFLOW_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDeclareofflow() <em>Declareofflow</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclareofflow()
   * @generated
   * @ordered
   */
  protected String declareofflow = DECLAREOFFLOW_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlternativeflows() <em>Alternativeflows</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlternativeflows()
   * @generated
   * @ordered
   */
  protected EList<Extension> alternativeflows;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UseCaseDslPackage.Literals.USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumber()
  {
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumber(int newNumber)
  {
    int oldNumber = number;
    number = newNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCaseDslPackage.USE_CASE__NUMBER, oldNumber, number));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCaseDslPackage.USE_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMainflow()
  {
    return mainflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMainflow(String newMainflow)
  {
    String oldMainflow = mainflow;
    mainflow = newMainflow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCaseDslPackage.USE_CASE__MAINFLOW, oldMainflow, mainflow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UseCaseStep> getSteps()
  {
    if (steps == null)
    {
      steps = new EObjectContainmentEList<UseCaseStep>(UseCaseStep.class, this, UseCaseDslPackage.USE_CASE__STEPS);
    }
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDeclareofflow()
  {
    return declareofflow;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeclareofflow(String newDeclareofflow)
  {
    String oldDeclareofflow = declareofflow;
    declareofflow = newDeclareofflow;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UseCaseDslPackage.USE_CASE__DECLAREOFFLOW, oldDeclareofflow, declareofflow));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Extension> getAlternativeflows()
  {
    if (alternativeflows == null)
    {
      alternativeflows = new EObjectContainmentEList<Extension>(Extension.class, this, UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS);
    }
    return alternativeflows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UseCaseDslPackage.USE_CASE__STEPS:
        return ((InternalEList<?>)getSteps()).basicRemove(otherEnd, msgs);
      case UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return ((InternalEList<?>)getAlternativeflows()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UseCaseDslPackage.USE_CASE__NUMBER:
        return getNumber();
      case UseCaseDslPackage.USE_CASE__NAME:
        return getName();
      case UseCaseDslPackage.USE_CASE__MAINFLOW:
        return getMainflow();
      case UseCaseDslPackage.USE_CASE__STEPS:
        return getSteps();
      case UseCaseDslPackage.USE_CASE__DECLAREOFFLOW:
        return getDeclareofflow();
      case UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return getAlternativeflows();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UseCaseDslPackage.USE_CASE__NUMBER:
        setNumber((Integer)newValue);
        return;
      case UseCaseDslPackage.USE_CASE__NAME:
        setName((String)newValue);
        return;
      case UseCaseDslPackage.USE_CASE__MAINFLOW:
        setMainflow((String)newValue);
        return;
      case UseCaseDslPackage.USE_CASE__STEPS:
        getSteps().clear();
        getSteps().addAll((Collection<? extends UseCaseStep>)newValue);
        return;
      case UseCaseDslPackage.USE_CASE__DECLAREOFFLOW:
        setDeclareofflow((String)newValue);
        return;
      case UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS:
        getAlternativeflows().clear();
        getAlternativeflows().addAll((Collection<? extends Extension>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UseCaseDslPackage.USE_CASE__NUMBER:
        setNumber(NUMBER_EDEFAULT);
        return;
      case UseCaseDslPackage.USE_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UseCaseDslPackage.USE_CASE__MAINFLOW:
        setMainflow(MAINFLOW_EDEFAULT);
        return;
      case UseCaseDslPackage.USE_CASE__STEPS:
        getSteps().clear();
        return;
      case UseCaseDslPackage.USE_CASE__DECLAREOFFLOW:
        setDeclareofflow(DECLAREOFFLOW_EDEFAULT);
        return;
      case UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS:
        getAlternativeflows().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UseCaseDslPackage.USE_CASE__NUMBER:
        return number != NUMBER_EDEFAULT;
      case UseCaseDslPackage.USE_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UseCaseDslPackage.USE_CASE__MAINFLOW:
        return MAINFLOW_EDEFAULT == null ? mainflow != null : !MAINFLOW_EDEFAULT.equals(mainflow);
      case UseCaseDslPackage.USE_CASE__STEPS:
        return steps != null && !steps.isEmpty();
      case UseCaseDslPackage.USE_CASE__DECLAREOFFLOW:
        return DECLAREOFFLOW_EDEFAULT == null ? declareofflow != null : !DECLAREOFFLOW_EDEFAULT.equals(declareofflow);
      case UseCaseDslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return alternativeflows != null && !alternativeflows.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (number: ");
    result.append(number);
    result.append(", name: ");
    result.append(name);
    result.append(", mainflow: ");
    result.append(mainflow);
    result.append(", declareofflow: ");
    result.append(declareofflow);
    result.append(')');
    return result.toString();
  }

} //UseCaseImpl
