/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalUseCaseDslParser;

options {
	tokenVocab=InternalUseCaseDslLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package useCase.xtext.useCaseDsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;

}
@members {
	private UseCaseDslGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("UC", "'UC'");
		tokenNameToValue.put("User", "'User'");
		tokenNameToValue.put("KW_System", "'System'");
		tokenNameToValue.put("MainFlow", "'MainFlow'");
	}

	public void setGrammarAccess(UseCaseDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleUseCase
entryRuleUseCase
:
{ before(grammarAccess.getUseCaseRule()); }
	 ruleUseCase
{ after(grammarAccess.getUseCaseRule()); } 
	 EOF 
;

// Rule UseCase
ruleUseCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUseCaseAccess().getGroup()); }
		(rule__UseCase__Group__0)
		{ after(grammarAccess.getUseCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMainFlow
entryRuleMainFlow
:
{ before(grammarAccess.getMainFlowRule()); }
	 ruleMainFlow
{ after(grammarAccess.getMainFlowRule()); } 
	 EOF 
;

// Rule MainFlow
ruleMainFlow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMainFlowAccess().getGroup()); }
		(rule__MainFlow__Group__0)
		{ after(grammarAccess.getMainFlowAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStep
entryRuleStep
:
{ before(grammarAccess.getStepRule()); }
	 ruleStep
{ after(grammarAccess.getStepRule()); } 
	 EOF 
;

// Rule Step
ruleStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStepAccess().getGroup()); }
		(rule__Step__Group__0)
		{ after(grammarAccess.getStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUserStep
entryRuleUserStep
:
{ before(grammarAccess.getUserStepRule()); }
	 ruleUserStep
{ after(grammarAccess.getUserStepRule()); } 
	 EOF 
;

// Rule UserStep
ruleUserStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUserStepAccess().getGroup()); }
		(rule__UserStep__Group__0)
		{ after(grammarAccess.getUserStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSystemStep
entryRuleSystemStep
:
{ before(grammarAccess.getSystemStepRule()); }
	 ruleSystemStep
{ after(grammarAccess.getSystemStepRule()); } 
	 EOF 
;

// Rule SystemStep
ruleSystemStep 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSystemStepAccess().getGroup()); }
		(rule__SystemStep__Group__0)
		{ after(grammarAccess.getSystemStepAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLongName
entryRuleLongName
:
{ before(grammarAccess.getLongNameRule()); }
	 ruleLongName
{ after(grammarAccess.getLongNameRule()); } 
	 EOF 
;

// Rule LongName
ruleLongName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLongNameAccess().getGroup()); }
		(rule__LongName__Group__0)
		{ after(grammarAccess.getLongNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__TypeAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getTypeUserStepParserRuleCall_2_0_0()); }
		ruleUserStep
		{ after(grammarAccess.getStepAccess().getTypeUserStepParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStepAccess().getTypeSystemStepParserRuleCall_2_0_1()); }
		ruleSystemStep
		{ after(grammarAccess.getStepAccess().getTypeSystemStepParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LongName__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLongNameAccess().getIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getLongNameAccess().getIDTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLongNameAccess().getANY_OTHERTerminalRuleCall_0_1()); }
		RULE_ANY_OTHER
		{ after(grammarAccess.getLongNameAccess().getANY_OTHERTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getLongNameAccess().getCHARTerminalRuleCall_0_2()); }
		RULE_CHAR
		{ after(grammarAccess.getLongNameAccess().getCHARTerminalRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getLongNameAccess().getColonKeyword_0_3()); }
		Colon
		{ after(grammarAccess.getLongNameAccess().getColonKeyword_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getLongNameAccess().getFullStopKeyword_0_4()); }
		FullStop
		{ after(grammarAccess.getLongNameAccess().getFullStopKeyword_0_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__0__Impl
	rule__UseCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getUCKeyword_0()); }
	UC
	{ after(grammarAccess.getUseCaseAccess().getUCKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__1__Impl
	rule__UseCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getNumberAssignment_1()); }
	(rule__UseCase__NumberAssignment_1)
	{ after(grammarAccess.getUseCaseAccess().getNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__2__Impl
	rule__UseCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getUseCaseAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__3__Impl
	rule__UseCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getUseCaseAccess().getNameAssignment_3()); }
		(rule__UseCase__NameAssignment_3)
		{ after(grammarAccess.getUseCaseAccess().getNameAssignment_3()); }
	)
	(
		{ before(grammarAccess.getUseCaseAccess().getNameAssignment_3()); }
		(rule__UseCase__NameAssignment_3)*
		{ after(grammarAccess.getUseCaseAccess().getNameAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UseCase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUseCaseAccess().getMainflowAssignment_4()); }
	(rule__UseCase__MainflowAssignment_4)
	{ after(grammarAccess.getUseCaseAccess().getMainflowAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MainFlow__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__0__Impl
	rule__MainFlow__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFlowAccess().getMainFlowAction_0()); }
	()
	{ after(grammarAccess.getMainFlowAccess().getMainFlowAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__1__Impl
	rule__MainFlow__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFlowAccess().getMainFlowKeyword_1()); }
	MainFlow
	{ after(grammarAccess.getMainFlowAccess().getMainFlowKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__2__Impl
	rule__MainFlow__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFlowAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getMainFlowAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__3__Impl
	rule__MainFlow__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFlowAccess().getBEGINTerminalRuleCall_3()); }
	RULE_BEGIN
	{ after(grammarAccess.getMainFlowAccess().getBEGINTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__4__Impl
	rule__MainFlow__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getMainFlowAccess().getStepsAssignment_4()); }
		(rule__MainFlow__StepsAssignment_4)
		{ after(grammarAccess.getMainFlowAccess().getStepsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getMainFlowAccess().getStepsAssignment_4()); }
		(rule__MainFlow__StepsAssignment_4)*
		{ after(grammarAccess.getMainFlowAccess().getStepsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MainFlow__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMainFlowAccess().getENDTerminalRuleCall_5()); }
	RULE_END
	{ after(grammarAccess.getMainFlowAccess().getENDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Step__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__0__Impl
	rule__Step__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getStepAction_0()); }
	()
	{ after(grammarAccess.getStepAccess().getStepAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__1__Impl
	rule__Step__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getNameAssignment_1()); }
	(rule__Step__NameAssignment_1)
	{ after(grammarAccess.getStepAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__2__Impl
	rule__Step__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStepAccess().getTypeAssignment_2()); }
	(rule__Step__TypeAssignment_2)
	{ after(grammarAccess.getStepAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Step__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStepAccess().getSentenceAssignment_3()); }
		(rule__Step__SentenceAssignment_3)
		{ after(grammarAccess.getStepAccess().getSentenceAssignment_3()); }
	)
	(
		{ before(grammarAccess.getStepAccess().getSentenceAssignment_3()); }
		(rule__Step__SentenceAssignment_3)*
		{ after(grammarAccess.getStepAccess().getSentenceAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UserStep__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserStep__Group__0__Impl
	rule__UserStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UserStep__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserStepAccess().getUserStepAction_0()); }
	()
	{ after(grammarAccess.getUserStepAccess().getUserStepAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserStep__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserStep__Group__1__Impl
	rule__UserStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UserStep__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserStepAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getUserStepAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UserStep__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UserStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UserStep__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUserStepAccess().getUserKeyword_2()); }
	User
	{ after(grammarAccess.getUserStepAccess().getUserKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SystemStep__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SystemStep__Group__0__Impl
	rule__SystemStep__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemStep__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemStepAccess().getSystemStepAction_0()); }
	()
	{ after(grammarAccess.getSystemStepAccess().getSystemStepAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemStep__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SystemStep__Group__1__Impl
	rule__SystemStep__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemStep__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemStepAccess().getFullStopKeyword_1()); }
	FullStop
	{ after(grammarAccess.getSystemStepAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemStep__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SystemStep__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemStep__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSystemStepAccess().getSystemKeyword_2()); }
	KW_System
	{ after(grammarAccess.getSystemStepAccess().getSystemKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LongName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LongName__Group__0__Impl
	rule__LongName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LongName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLongNameAccess().getAlternatives_0()); }
	(rule__LongName__Alternatives_0)
	{ after(grammarAccess.getLongNameAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LongName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LongName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LongName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLongNameAccess().getWSTerminalRuleCall_1()); }
	(RULE_WS)?
	{ after(grammarAccess.getLongNameAccess().getWSTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UseCase__NumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUseCaseAccess().getNumberINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getUseCaseAccess().getNumberINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUseCaseAccess().getNameLongNameParserRuleCall_3_0()); }
		ruleLongName
		{ after(grammarAccess.getUseCaseAccess().getNameLongNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UseCase__MainflowAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUseCaseAccess().getMainflowMainFlowParserRuleCall_4_0()); }
		ruleMainFlow
		{ after(grammarAccess.getUseCaseAccess().getMainflowMainFlowParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MainFlow__StepsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMainFlowAccess().getStepsStepParserRuleCall_4_0()); }
		ruleStep
		{ after(grammarAccess.getMainFlowAccess().getStepsStepParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getNameINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getStepAccess().getNameINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getTypeAlternatives_2_0()); }
		(rule__Step__TypeAlternatives_2_0)
		{ after(grammarAccess.getStepAccess().getTypeAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Step__SentenceAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStepAccess().getSentenceLongNameParserRuleCall_3_0()); }
		ruleLongName
		{ after(grammarAccess.getStepAccess().getSentenceLongNameParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
