/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.validation;

import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

import useCase.xtext.useCaseDsl.useCaseDsl.Extension;
import useCase.xtext.useCaseDsl.useCaseDsl.RepeatingStep;
import useCase.xtext.useCaseDsl.useCaseDsl.Step;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCase;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseStep;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class UseCaseDslValidator extends AbstractUseCaseDslValidator {
	
	public static final String INVALID_NAME = "invalidName";
	public static final String INVALID_REFERENCE = "invalidReference";
	
	@Check
	public void checkStepNameAreCorrect(Step step) {
		/*int i = 0;
		EObject parent = step.eContainer();
		while(parent instanceof Step) {
				i = i + 1;
			parent = parent.eContainer();
		}
		if (step.getName().length() > (2*(i + 1))) {
				warning("Step name should be shorter",
						UseCaseDslPackage.Literals.STEP__NAME,
						INVALID_NAME);	
		}
		if (step.getName().length() < (2*(i + 1) - 1)) {
			warning("Step name should be longer",
					UseCaseDslPackage.Literals.STEP__NAME,
					INVALID_NAME);	
		}
		parent = step.eContainer();
		if(!step.getName().substring(0, 2*i - 1).equals(((Step)parent).getName().substring(0,2*i - 1))) {
			warning("StepName incorrect",
					UseCaseDslPackage.Literals.STEP__NAME,
					INVALID_NAME);
		}
		*/
		EObject parent = step.eContainer();
		List<EObject> compare = parent.eContents();   // EcoreUtil2.getAllContentsOfType(parent, Step.class);
		Iterator<EObject> it = compare.iterator();
		while(it.hasNext()) {
			EObject a = it.next();
			if(a instanceof Step && a != step  && ((Step) a).getName().equals(step.getName())) {
				error("Step name are not unique in context",
						UseCaseDslPackage.Literals.STEP__NAME,
						INVALID_NAME);
				return;
			}
		}
	}

	
	
	@Check
	public void checkStepParent(UseCaseStep step) {
		if (step.eContainer() instanceof Step) {
			if(!((Step) step.eContainer()).getName().equals(step.getParent().getName())) {
				error("This step is not his parent",
						UseCaseDslPackage.Literals.USE_CASE_STEP__PARENT,
						INVALID_REFERENCE);
			}
		}
	}
	
	
	@Check
	public void checkExtensionName(Extension extension) {
		EObject parent = extension.eContainer();
		List<Extension> compare = ((UseCase) parent).getAlternativeflows();
		Iterator<Extension> it = compare.iterator();
		while (it.hasNext()) {
			Extension a = it.next();
			if (a != extension && a.getName() == extension.getName() && a.getStartFrom() == extension.getStartFrom()) {
				error("This extension name is not unique",
						UseCaseDslPackage.Literals.EXTENSION__NAME,
						INVALID_NAME);
			}
		}
		//if(extension)
	}
	
	
}
