/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;
import useCase.xtext.useCaseDsl.useCaseDsl.MainFlow;
import useCase.xtext.useCaseDsl.useCaseDsl.Step;
import useCase.xtext.useCaseDsl.useCaseDsl.SystemStep;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCase;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;
import useCase.xtext.useCaseDsl.useCaseDsl.UserStep;

@SuppressWarnings("all")
public class UseCaseDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UseCaseDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UseCaseDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UseCaseDslPackage.MAIN_FLOW:
				sequence_MainFlow(context, (MainFlow) semanticObject); 
				return; 
			case UseCaseDslPackage.STEP:
				sequence_Step(context, (Step) semanticObject); 
				return; 
			case UseCaseDslPackage.SYSTEM_STEP:
				sequence_SystemStep(context, (SystemStep) semanticObject); 
				return; 
			case UseCaseDslPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case UseCaseDslPackage.USER_STEP:
				sequence_UserStep(context, (UserStep) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     MainFlow returns MainFlow
	 *
	 * Constraint:
	 *     steps+=Step+
	 */
	protected void sequence_MainFlow(ISerializationContext context, MainFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns Step
	 *
	 * Constraint:
	 *     (name=INT (type=UserStep | type=SystemStep) sentence+=LongName+)
	 */
	protected void sequence_Step(ISerializationContext context, Step semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemStep returns SystemStep
	 *
	 * Constraint:
	 *     {SystemStep}
	 */
	protected void sequence_SystemStep(ISerializationContext context, SystemStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (number=INT name+=LongName+ mainflow=MainFlow)
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UserStep returns UserStep
	 *
	 * Constraint:
	 *     {UserStep}
	 */
	protected void sequence_UserStep(ISerializationContext context, UserStep semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
