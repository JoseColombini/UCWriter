grammar useCase.xtext.useCaseDsl.UseCaseDsl with org.eclipse.xtext.common.Terminals 

generate useCaseDsl "http://www.xtext.useCase/useCaseDsl/UseCaseDsl"




UseCaseDocument:
	(usecase += UseCase)+;

//Use case structure
UseCase:
	'UC' number = INT ':' (name = LongName)
	
	( precondition = Precondition)?
	( postcondition = Postcondition)?
	 
	'MAIN''FLOW'':'
	BEGIN
		(steps += UseCaseStep)+
	END
	(('ALTERNATIVE' 'FLOW')':'
	BEGIN
		(alternativeflows += Extension)+
	END)?;

//Flows and behavorial
Extension:
	(startFrom = [UseCaseStep|QualifiedStepName] | startFrom =[ExtensionStep|QualifiedExtensionStepName])
	'.' (name = CHAR)'.' 'IF' (condition = Condition)
	BEGIN
		(steps += ExtensionStep)*
		((StepName'.' 'RETURN' 'TO' 
			(resumeAt = [UseCaseStep|QualifiedStepName] |
			 resumeAt = [ExtensionStep|QualifiedExtensionStepName])) |
		(end = DeadEndStep))
	END;

//Steps
Step:
	UseCaseStep|ExtensionStep;

UseCaseStep:
	(parent = [Step|QualifiedStepName] '.')? (name = StepName)'.' 'INCLUDE'(reference = [UseCase|LongName])|
	{UserStep} (parent = [Step|QualifiedStepName] '.')? (name = StepName)'.' 'USER' (sentence = LongName)|
	{SystemStep} (parent = [Step|QualifiedStepName] '.')? (name = StepName)'.' 'SYSTEM'(sentence = LongName)|
	{RepeatingStep}(parent = [Step|QualifiedStepName] '.')? (name = StepName)'.' 'WHILE'(repeatingCondition = Condition)
	BEGIN
		(/*(parent += [RepeatingStep|StepName]'.')+*/(repeatflow += UseCaseStep))+
	END;

//I dont know how to use this shit
ExtensionStep:
	(name = QualifiedExtensionStepName)'.' ('USER'|'SYSTEM'|'WHILE')? (sentence = LongName)|
	DeadEndStep;

DeadEndStep:
	(name = QualifiedExtensionStepName)'.' ('USER'|'SYSTEM'|'WHILE')? (sentence = LongName)? 'UC' 'END';

//Conditions
Precondition:
	('PRECONDITION')':' (condition = Condition);
	
Postcondition:
	('POSTCONDITION')':' (condition = Condition);
/**********************	}
******* DataTypes *****
***********************/

LongName:
	(ID|ANY_OTHER|CHAR|':'|'.'|'"'|"'")+;
	
Condition:
	(ID|ANY_OTHER|CHAR|':'|'.'|'"'|"'"|'AND'|'OR')+;

StepName:
	INT
;

QualifiedStepName:
	StepName('.'StepName)*
;

QualifiedExtensionStepName:
	CHAR'.'QualifiedStepName;



/***************************	
******* TERMINAL RULES *****
****************************/
terminal CHAR:
	('a'..'z'|'A'..'Z');

/*terminal fragment ESCAPED_CHAR:
    '\\' ('n'|'t'|'r'|'\\');

terminal SP:
	' ';
*/

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation

/***********************************
 ********* Codes that I don't want to discard*****
 * *********************************************
 * /*MainFlow:
	{MainFlow} 	(name = 'MainFLow') ':'
	BEGIN
		(steps += UseCaseStep)+
	END;
/

*AlternativeFlow:
	(name = 'AlternativeFlow') ':'
	BEGIN
		(extension += Extension)+
	END;
*
* Extension:
	(ExtensionStep)
	BEGIN
		(steps += UseCaseStep)+
		(resumeAt = DeadEndStep)? 
	END;
/*ExtensionStep:
	'Ex' (startAt = [Step]) '.' name = CHAR '.' (condition += Condition);


DeadEndStep:
	(name = INT) '.' 'Return' 'to' (resumeAt = [Step]);
***/