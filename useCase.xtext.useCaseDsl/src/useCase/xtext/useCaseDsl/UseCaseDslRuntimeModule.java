/////*
//// * generated by Xtext 2.20.0
//// */
////package useCase.xtext.useCaseDsl;
////
////import org.eclipse.xtext.naming.IQualifiedNameProvider;
//////
///////**
////// * Use this class to register components to be used at runtime / without the Equinox extension registry.
////// */
//////public class UseCaseDslRuntimeModule extends AbstractUseCaseDslRuntimeModule {
//////	@Override
//////	
//////}
//////
//////class MyDslRuntimeModule extends AbstractMyDslRuntimeModule {
//////	override Class<? extends IQualifiedNameProvider>
//////		bindIQualifiedNameProvider() {
//////			return typeof(MyDslQualifiedNameProvider);
//////	}
//////} 
//
//package useCase.xtext.useCaseDsl;
//
//import com.google.inject.Inject;
//
//import java.util.Iterator;
//import java.util.List;
//
//import org.eclipse.emf.ecore.EObject;
//import org.eclipse.xtext.naming.DefaultDeclarativeQualifiedNameProvider;
//import org.eclipse.xtext.naming.IQualifiedNameConverter;
//import org.eclipse.xtext.naming.QualifiedName;
//import org.eclipse.xtext.nodemodel.INode;
//import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
//import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;
//import useCase.xtext.useCaseDsl.useCaseDsl.Extension;
//import org.eclipse.xtext.naming.IQualifiedNameProvider;
//
//class useCaseDslIQualifiedNameProvider extends DefaultDeclarativeQualifiedNameProvider {
//	
//	@Inject
//	IQualifiedNameConverter converter = new IQualifiedNameConverter.DefaultImpl();
//	@Inject IQualifiedNameProvider iq;
//	@Override
//	public QualifiedName getFullyQualifiedName(EObject obj) {
//		if (obj instanceof Extension) {
//			List<INode> nodes = NodeModelUtils.findNodesForFeature(obj,
//							UseCaseDslPackage.Literals.EXTENSION__START_FROM);
//			Iterator<INode> it = nodes.iterator();
//	 		while (it.hasNext()) {
//	 			INode node = it.next();
//	 			String text = NodeModelUtils.getTokenText(node);
//				if (text != null) {
//					QualifiedName Qname = iq.getFullyQualifiedName(obj);
//					QualifiedName myname = Qname.skipLast(1);
//					//text = myname.toString() + text + Qname.getLastSegment();
//	 				return converter.toQualifiedName(text);
//	 			}
//			}
//		}
//	return super.getFullyQualifiedName(obj);
//	}
//}
