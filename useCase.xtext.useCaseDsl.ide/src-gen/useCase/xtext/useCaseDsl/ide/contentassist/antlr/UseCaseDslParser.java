/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import useCase.xtext.useCaseDsl.ide.contentassist.antlr.internal.InternalUseCaseDslParser;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;

public class UseCaseDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UseCaseDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UseCaseDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStepAccess().getTypeAlternatives_2_0(), "rule__Step__TypeAlternatives_2_0");
			builder.put(grammarAccess.getLongNameAccess().getAlternatives(), "rule__LongName__Alternatives");
			builder.put(grammarAccess.getUseCaseAccess().getGroup(), "rule__UseCase__Group__0");
			builder.put(grammarAccess.getMainFlowAccess().getGroup(), "rule__MainFlow__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getUserStepAccess().getGroup(), "rule__UserStep__Group__0");
			builder.put(grammarAccess.getSystemStepAccess().getGroup(), "rule__SystemStep__Group__0");
			builder.put(grammarAccess.getUseCaseAccess().getNumberAssignment_1(), "rule__UseCase__NumberAssignment_1");
			builder.put(grammarAccess.getUseCaseAccess().getNameAssignment_3(), "rule__UseCase__NameAssignment_3");
			builder.put(grammarAccess.getUseCaseAccess().getMainflowAssignment_4(), "rule__UseCase__MainflowAssignment_4");
			builder.put(grammarAccess.getMainFlowAccess().getNameAssignment_1(), "rule__MainFlow__NameAssignment_1");
			builder.put(grammarAccess.getMainFlowAccess().getStepsAssignment_4(), "rule__MainFlow__StepsAssignment_4");
			builder.put(grammarAccess.getStepAccess().getNameAssignment_1(), "rule__Step__NameAssignment_1");
			builder.put(grammarAccess.getStepAccess().getTypeAssignment_2(), "rule__Step__TypeAssignment_2");
			builder.put(grammarAccess.getStepAccess().getSentenceAssignment_3(), "rule__Step__SentenceAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UseCaseDslGrammarAccess grammarAccess;

	@Override
	protected InternalUseCaseDslParser createParser() {
		InternalUseCaseDslParser result = new InternalUseCaseDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new UseCaseDslTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UseCaseDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UseCaseDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
