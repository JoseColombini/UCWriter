/*
 * generated by Xtext 2.20.0
 */
parser grammar InternalUseCaseDslParser;

options {
	tokenVocab=InternalUseCaseDslLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package useCase.xtext.useCaseDsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;

}

@members {

 	private UseCaseDslGrammarAccess grammarAccess;

    public InternalUseCaseDslParser(TokenStream input, UseCaseDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "UseCase";
   	}

   	@Override
   	protected UseCaseDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUseCase
entryRuleUseCase returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getUseCaseRule()); }
	iv_ruleUseCase=ruleUseCase
	{ $current=$iv_ruleUseCase.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule UseCase
ruleUseCase returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=UC
		{
			newLeafNode(otherlv_0, grammarAccess.getUseCaseAccess().getUCKeyword_0());
		}
		(
			(
				lv_number_1_0=RULE_INT
				{
					newLeafNode(lv_number_1_0, grammarAccess.getUseCaseAccess().getNumberINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed(
						$current,
						"number",
						lv_number_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getUseCaseAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getNameLongNameParserRuleCall_3_0());
				}
				lv_name_3_0=ruleLongName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_mainflow_4_0=MainFlow
				{
					newLeafNode(lv_mainflow_4_0, grammarAccess.getUseCaseAccess().getMainflowMainFlowKeyword_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getUseCaseRule());
					}
					setWithLastConsumed($current, "mainflow", lv_mainflow_4_0, "MainFlow");
				}
			)
		)
		otherlv_5=Colon
		{
			newLeafNode(otherlv_5, grammarAccess.getUseCaseAccess().getColonKeyword_5());
		}
		this_BEGIN_6=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_6, grammarAccess.getUseCaseAccess().getBEGINTerminalRuleCall_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUseCaseAccess().getStepsUseCaseStepParserRuleCall_7_0());
				}
				lv_steps_7_0=ruleUseCaseStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUseCaseRule());
					}
					add(
						$current,
						"steps",
						lv_steps_7_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.UseCaseStep");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		this_END_8=RULE_END
		{
			newLeafNode(this_END_8, grammarAccess.getUseCaseAccess().getENDTerminalRuleCall_8());
		}
		(
			(
				(
					lv_declareofflow_9_0=AlternativeFlow
					{
						newLeafNode(lv_declareofflow_9_0, grammarAccess.getUseCaseAccess().getDeclareofflowAlternativeFlowKeyword_9_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUseCaseRule());
						}
						setWithLastConsumed($current, "declareofflow", lv_declareofflow_9_0, "AlternativeFlow");
					}
				)
			)
			otherlv_10=Colon
			{
				newLeafNode(otherlv_10, grammarAccess.getUseCaseAccess().getColonKeyword_9_1());
			}
			this_BEGIN_11=RULE_BEGIN
			{
				newLeafNode(this_BEGIN_11, grammarAccess.getUseCaseAccess().getBEGINTerminalRuleCall_9_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUseCaseAccess().getAlternativeflowsExtensionParserRuleCall_9_3_0());
					}
					lv_alternativeflows_12_0=ruleExtension
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseCaseRule());
						}
						add(
							$current,
							"alternativeflows",
							lv_alternativeflows_12_0,
							"useCase.xtext.useCaseDsl.UseCaseDsl.Extension");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			this_END_13=RULE_END
			{
				newLeafNode(this_END_13, grammarAccess.getUseCaseAccess().getENDTerminalRuleCall_9_4());
			}
		)?
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleExtension
entryRuleExtension returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionRule()); }
	iv_ruleExtension=ruleExtension
	{ $current=$iv_ruleExtension.current; }
	EOF;

// Rule Extension
ruleExtension returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_startFrom_0_0=RULE_INT
				{
					newLeafNode(lv_startFrom_0_0, grammarAccess.getExtensionAccess().getStartFromINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtensionRule());
					}
					setWithLastConsumed(
						$current,
						"startFrom",
						lv_startFrom_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=FullStop
		{
			newLeafNode(otherlv_1, grammarAccess.getExtensionAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_CHAR
				{
					newLeafNode(lv_name_2_0, grammarAccess.getExtensionAccess().getNameCHARTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtensionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.CHAR");
				}
			)
		)
		otherlv_3=FullStop
		{
			newLeafNode(otherlv_3, grammarAccess.getExtensionAccess().getFullStopKeyword_3());
		}
		otherlv_4=IF
		{
			newLeafNode(otherlv_4, grammarAccess.getExtensionAccess().getIFKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getConditionConditionParserRuleCall_5_0());
				}
				lv_condition_5_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					set(
						$current,
						"condition",
						lv_condition_5_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_BEGIN_6=RULE_BEGIN
		{
			newLeafNode(this_BEGIN_6, grammarAccess.getExtensionAccess().getBEGINTerminalRuleCall_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionAccess().getStepsExtensionStepParserRuleCall_7_0());
				}
				lv_steps_7_0=ruleExtensionStep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionRule());
					}
					add(
						$current,
						"steps",
						lv_steps_7_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.ExtensionStep");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				this_INT_8=RULE_INT
				{
					newLeafNode(this_INT_8, grammarAccess.getExtensionAccess().getINTTerminalRuleCall_8_0_0());
				}
				otherlv_9=FullStop
				{
					newLeafNode(otherlv_9, grammarAccess.getExtensionAccess().getFullStopKeyword_8_0_1());
				}
				otherlv_10=Return
				{
					newLeafNode(otherlv_10, grammarAccess.getExtensionAccess().getReturnKeyword_8_0_2());
				}
				otherlv_11=To
				{
					newLeafNode(otherlv_11, grammarAccess.getExtensionAccess().getToKeyword_8_0_3());
				}
				(
					(
						lv_resumeAt_12_0=RULE_INT
						{
							newLeafNode(lv_resumeAt_12_0, grammarAccess.getExtensionAccess().getResumeAtINTTerminalRuleCall_8_0_4_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExtensionRule());
							}
							setWithLastConsumed(
								$current,
								"resumeAt",
								lv_resumeAt_12_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getExtensionAccess().getEndDeadEndStepParserRuleCall_8_1_0());
					}
					lv_end_13_0=ruleDeadEndStep
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExtensionRule());
						}
						set(
							$current,
							"end",
							lv_end_13_0,
							"useCase.xtext.useCaseDsl.UseCaseDsl.DeadEndStep");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		this_END_14=RULE_END
		{
			newLeafNode(this_END_14, grammarAccess.getExtensionAccess().getENDTerminalRuleCall_9());
		}
	)
;

// Entry rule entryRuleUseCaseStep
entryRuleUseCaseStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUseCaseStepRule()); }
	iv_ruleUseCaseStep=ruleUseCaseStep
	{ $current=$iv_ruleUseCaseStep.current; }
	EOF;

// Rule UseCaseStep
ruleUseCaseStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUseCaseStepAccess().getUserStepAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_name_1_0=RULE_INT
					{
						newLeafNode(lv_name_1_0, grammarAccess.getUseCaseStepAccess().getNameINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUseCaseStepRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_2=FullStop
			{
				newLeafNode(otherlv_2, grammarAccess.getUseCaseStepAccess().getFullStopKeyword_0_2());
			}
			otherlv_3=User
			{
				newLeafNode(otherlv_3, grammarAccess.getUseCaseStepAccess().getUserKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUseCaseStepAccess().getSentenceLongNameParserRuleCall_0_4_0());
					}
					lv_sentence_4_0=ruleLongName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseCaseStepRule());
						}
						set(
							$current,
							"sentence",
							lv_sentence_4_0,
							"useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUseCaseStepAccess().getSystemStepAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_name_6_0=RULE_INT
					{
						newLeafNode(lv_name_6_0, grammarAccess.getUseCaseStepAccess().getNameINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getUseCaseStepRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_6_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_7=FullStop
			{
				newLeafNode(otherlv_7, grammarAccess.getUseCaseStepAccess().getFullStopKeyword_1_2());
			}
			otherlv_8=KW_System
			{
				newLeafNode(otherlv_8, grammarAccess.getUseCaseStepAccess().getSystemKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getUseCaseStepAccess().getSentenceLongNameParserRuleCall_1_4_0());
					}
					lv_sentence_9_0=ruleLongName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUseCaseStepRule());
						}
						set(
							$current,
							"sentence",
							lv_sentence_9_0,
							"useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExtensionStep
entryRuleExtensionStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtensionStepRule()); }
	iv_ruleExtensionStep=ruleExtensionStep
	{ $current=$iv_ruleExtensionStep.current; }
	EOF;

// Rule ExtensionStep
ruleExtensionStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_INT
				{
					newLeafNode(lv_name_0_0, grammarAccess.getExtensionStepAccess().getNameINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExtensionStepRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=FullStop
		{
			newLeafNode(otherlv_1, grammarAccess.getExtensionStepAccess().getFullStopKeyword_1());
		}
		(
			otherlv_2=User
			{
				newLeafNode(otherlv_2, grammarAccess.getExtensionStepAccess().getUserKeyword_2_0());
			}
			    |
			otherlv_3=KW_System
			{
				newLeafNode(otherlv_3, grammarAccess.getExtensionStepAccess().getSystemKeyword_2_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExtensionStepAccess().getSentenceLongNameParserRuleCall_3_0());
				}
				lv_sentence_4_0=ruleLongName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExtensionStepRule());
					}
					set(
						$current,
						"sentence",
						lv_sentence_4_0,
						"useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDeadEndStep
entryRuleDeadEndStep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeadEndStepRule()); }
	iv_ruleDeadEndStep=ruleDeadEndStep
	{ $current=$iv_ruleDeadEndStep.current; }
	EOF;

// Rule DeadEndStep
ruleDeadEndStep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeadEndStepAccess().getExtensionStepParserRuleCall_0());
		}
		this_ExtensionStep_0=ruleExtensionStep
		{
			$current = $this_ExtensionStep_0.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_1=UC
		{
			newLeafNode(otherlv_1, grammarAccess.getDeadEndStepAccess().getUCKeyword_1());
		}
		otherlv_2=END
		{
			newLeafNode(otherlv_2, grammarAccess.getDeadEndStepAccess().getENDKeyword_2());
		}
	)
;

// Entry rule entryRuleLongName
entryRuleLongName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLongNameRule()); }
	iv_ruleLongName=ruleLongName
	{ $current=$iv_ruleLongName.current.getText(); }
	EOF;

// Rule LongName
ruleLongName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getLongNameAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_ANY_OTHER_1=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_1);
		}
		{
			newLeafNode(this_ANY_OTHER_1, grammarAccess.getLongNameAccess().getANY_OTHERTerminalRuleCall_1());
		}
		    |
		this_CHAR_2=RULE_CHAR
		{
			$current.merge(this_CHAR_2);
		}
		{
			newLeafNode(this_CHAR_2, grammarAccess.getLongNameAccess().getCHARTerminalRuleCall_2());
		}
		    |
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLongNameAccess().getColonKeyword_3());
		}
		    |
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLongNameAccess().getFullStopKeyword_4());
		}
		    |
		kw=QuotationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLongNameAccess().getQuotationMarkKeyword_5());
		}
		    |
		kw=Apostrophe
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getLongNameAccess().getApostropheKeyword_6());
		}
	)+
;

// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current.getText(); }
	EOF;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getConditionAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_ANY_OTHER_1=RULE_ANY_OTHER
		{
			$current.merge(this_ANY_OTHER_1);
		}
		{
			newLeafNode(this_ANY_OTHER_1, grammarAccess.getConditionAccess().getANY_OTHERTerminalRuleCall_1());
		}
		    |
		this_CHAR_2=RULE_CHAR
		{
			$current.merge(this_CHAR_2);
		}
		{
			newLeafNode(this_CHAR_2, grammarAccess.getConditionAccess().getCHARTerminalRuleCall_2());
		}
		    |
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getColonKeyword_3());
		}
		    |
		kw=FullStop
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getFullStopKeyword_4());
		}
		    |
		kw=QuotationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getQuotationMarkKeyword_5());
		}
		    |
		kw=Apostrophe
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getApostropheKeyword_6());
		}
		    |
		kw=AND
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getANDKeyword_7());
		}
		    |
		kw=OR
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getConditionAccess().getORKeyword_8());
		}
	)+
;
