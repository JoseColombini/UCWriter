/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import useCase.xtext.useCaseDsl.services.UseCaseDslGrammarAccess;
import useCase.xtext.useCaseDsl.useCaseDsl.Extension;
import useCase.xtext.useCaseDsl.useCaseDsl.ExtensionStep;
import useCase.xtext.useCaseDsl.useCaseDsl.SystemStep;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCase;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;
import useCase.xtext.useCaseDsl.useCaseDsl.UserStep;

@SuppressWarnings("all")
public class UseCaseDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private UseCaseDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UseCaseDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UseCaseDslPackage.EXTENSION:
				sequence_Extension(context, (Extension) semanticObject); 
				return; 
			case UseCaseDslPackage.EXTENSION_STEP:
				sequence_ExtensionStep(context, (ExtensionStep) semanticObject); 
				return; 
			case UseCaseDslPackage.SYSTEM_STEP:
				sequence_UseCaseStep(context, (SystemStep) semanticObject); 
				return; 
			case UseCaseDslPackage.USE_CASE:
				sequence_UseCase(context, (UseCase) semanticObject); 
				return; 
			case UseCaseDslPackage.USER_STEP:
				sequence_UseCaseStep(context, (UserStep) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Step returns ExtensionStep
	 *     ExtensionStep returns ExtensionStep
	 *     DeadEndStep returns ExtensionStep
	 *
	 * Constraint:
	 *     (name=INT sentence=LongName)
	 */
	protected void sequence_ExtensionStep(ISerializationContext context, ExtensionStep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__NAME));
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExtensionStepAccess().getNameINTTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExtensionStepAccess().getSentenceLongNameParserRuleCall_3_0(), semanticObject.getSentence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Extension returns Extension
	 *
	 * Constraint:
	 *     (startFrom=INT name=CHAR condition=Condition steps+=ExtensionStep+ (resumeAt=INT | end=DeadEndStep))
	 */
	protected void sequence_Extension(ISerializationContext context, Extension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Step returns SystemStep
	 *     UseCaseStep returns SystemStep
	 *
	 * Constraint:
	 *     (name=INT sentence=LongName)
	 */
	protected void sequence_UseCaseStep(ISerializationContext context, SystemStep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__NAME));
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUseCaseStepAccess().getNameINTTerminalRuleCall_1_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUseCaseStepAccess().getSentenceLongNameParserRuleCall_1_4_0(), semanticObject.getSentence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Step returns UserStep
	 *     UseCaseStep returns UserStep
	 *
	 * Constraint:
	 *     (name=INT sentence=LongName)
	 */
	protected void sequence_UseCaseStep(ISerializationContext context, UserStep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__NAME));
			if (transientValues.isValueTransient(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UseCaseDslPackage.Literals.STEP__SENTENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUseCaseStepAccess().getNameINTTerminalRuleCall_0_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUseCaseStepAccess().getSentenceLongNameParserRuleCall_0_4_0(), semanticObject.getSentence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     UseCase returns UseCase
	 *
	 * Constraint:
	 *     (number=INT name=LongName mainflow='MainFlow' steps+=UseCaseStep+ (declareofflow='AlternativeFlow' alternativeflows+=Extension+)?)
	 */
	protected void sequence_UseCase(ISerializationContext context, UseCase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
