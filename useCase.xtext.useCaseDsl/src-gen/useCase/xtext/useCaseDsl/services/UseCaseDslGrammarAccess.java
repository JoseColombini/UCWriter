/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameLongNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cPreconditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPreconditionPreconditionParserRuleCall_4_0 = (RuleCall)cPreconditionAssignment_4.eContents().get(0);
		private final Assignment cPostconditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPostconditionPostconditionParserRuleCall_5_0 = (RuleCall)cPostconditionAssignment_5.eContents().get(0);
		private final Assignment cMainflowAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Keyword cMainflowMAINFLOWKeyword_6_0 = (Keyword)cMainflowAssignment_6.eContents().get(0);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cBEGINTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cStepsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStepsUseCaseStepParserRuleCall_9_0 = (RuleCall)cStepsAssignment_9.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Assignment cDeclareofflowAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cDeclareofflowALTERNATIVEFLOWKeyword_11_0_0 = (Keyword)cDeclareofflowAssignment_11_0.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_11_2 = (RuleCall)cGroup_11.eContents().get(2);
		private final Assignment cAlternativeflowsAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cAlternativeflowsExtensionParserRuleCall_11_3_0 = (RuleCall)cAlternativeflowsAssignment_11_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_11_4 = (RuleCall)cGroup_11.eContents().get(4);
		
		////Use case structure
		//UseCase hidden(WS):
		//	'UC' number=INT ':' name=LongName precondition=Precondition?
		//	postcondition=Postcondition?
		//	mainflow='MAINFLOW' ':'
		//	BEGIN
		//	steps+=UseCaseStep+
		//	END (declareofflow='ALTERNATIVEFLOW' ':'
		//	BEGIN
		//	alternativeflows+=Extension+
		//	END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'UC' number=INT ':' name=LongName precondition=Precondition? postcondition=Postcondition? mainflow='MAINFLOW' ':' BEGIN
		//steps+=UseCaseStep+ END (declareofflow='ALTERNATIVEFLOW' ':' BEGIN alternativeflows+=Extension+ END)?
		public Group getGroup() { return cGroup; }
		
		//'UC'
		public Keyword getUCKeyword_0() { return cUCKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name=LongName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//LongName
		public RuleCall getNameLongNameParserRuleCall_3_0() { return cNameLongNameParserRuleCall_3_0; }
		
		//precondition=Precondition?
		public Assignment getPreconditionAssignment_4() { return cPreconditionAssignment_4; }
		
		//Precondition
		public RuleCall getPreconditionPreconditionParserRuleCall_4_0() { return cPreconditionPreconditionParserRuleCall_4_0; }
		
		//postcondition=Postcondition?
		public Assignment getPostconditionAssignment_5() { return cPostconditionAssignment_5; }
		
		//Postcondition
		public RuleCall getPostconditionPostconditionParserRuleCall_5_0() { return cPostconditionPostconditionParserRuleCall_5_0; }
		
		//mainflow='MAINFLOW'
		public Assignment getMainflowAssignment_6() { return cMainflowAssignment_6; }
		
		//'MAINFLOW'
		public Keyword getMainflowMAINFLOWKeyword_6_0() { return cMainflowMAINFLOWKeyword_6_0; }
		
		//':'
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_8() { return cBEGINTerminalRuleCall_8; }
		
		//steps+=UseCaseStep+
		public Assignment getStepsAssignment_9() { return cStepsAssignment_9; }
		
		//UseCaseStep
		public RuleCall getStepsUseCaseStepParserRuleCall_9_0() { return cStepsUseCaseStepParserRuleCall_9_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_10() { return cENDTerminalRuleCall_10; }
		
		//(declareofflow='ALTERNATIVEFLOW' ':' BEGIN alternativeflows+=Extension+ END)?
		public Group getGroup_11() { return cGroup_11; }
		
		//declareofflow='ALTERNATIVEFLOW'
		public Assignment getDeclareofflowAssignment_11_0() { return cDeclareofflowAssignment_11_0; }
		
		//'ALTERNATIVEFLOW'
		public Keyword getDeclareofflowALTERNATIVEFLOWKeyword_11_0_0() { return cDeclareofflowALTERNATIVEFLOWKeyword_11_0_0; }
		
		//':'
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_11_2() { return cBEGINTerminalRuleCall_11_2; }
		
		//alternativeflows+=Extension+
		public Assignment getAlternativeflowsAssignment_11_3() { return cAlternativeflowsAssignment_11_3; }
		
		//Extension
		public RuleCall getAlternativeflowsExtensionParserRuleCall_11_3_0() { return cAlternativeflowsExtensionParserRuleCall_11_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_11_4() { return cENDTerminalRuleCall_11_4; }
	}
	public class ExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Extension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartFromINTTerminalRuleCall_0_0 = (RuleCall)cStartFromAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameCHARTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cIFKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConditionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConditionConditionParserRuleCall_5_0 = (RuleCall)cConditionAssignment_5.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cStepsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStepsExtensionStepParserRuleCall_7_0 = (RuleCall)cStepsAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_8_0_0 = (RuleCall)cGroup_8_0.eContents().get(0);
		private final Keyword cFullStopKeyword_8_0_1 = (Keyword)cGroup_8_0.eContents().get(1);
		private final Keyword cRETURNKeyword_8_0_2 = (Keyword)cGroup_8_0.eContents().get(2);
		private final Keyword cTOKeyword_8_0_3 = (Keyword)cGroup_8_0.eContents().get(3);
		private final Assignment cResumeAtAssignment_8_0_4 = (Assignment)cGroup_8_0.eContents().get(4);
		private final RuleCall cResumeAtINTTerminalRuleCall_8_0_4_0 = (RuleCall)cResumeAtAssignment_8_0_4.eContents().get(0);
		private final Assignment cEndAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cEndDeadEndStepParserRuleCall_8_1_0 = (RuleCall)cEndAssignment_8_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		////Flows and behavorial
		//Extension:
		//	startFrom=INT '.' name=CHAR '.' 'IF' condition=Condition BEGIN
		//	steps+=ExtensionStep+ (INT '.' 'RETURN' 'TO' resumeAt=INT | end=DeadEndStep) END;
		@Override public ParserRule getRule() { return rule; }
		
		//startFrom=INT '.' name=CHAR '.' 'IF' condition=Condition BEGIN steps+=ExtensionStep+ (INT '.' 'RETURN' 'TO' resumeAt=INT
		//| end=DeadEndStep) END
		public Group getGroup() { return cGroup; }
		
		//startFrom=INT
		public Assignment getStartFromAssignment_0() { return cStartFromAssignment_0; }
		
		//INT
		public RuleCall getStartFromINTTerminalRuleCall_0_0() { return cStartFromINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//name=CHAR
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//CHAR
		public RuleCall getNameCHARTerminalRuleCall_2_0() { return cNameCHARTerminalRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//'IF'
		public Keyword getIFKeyword_4() { return cIFKeyword_4; }
		
		//condition=Condition
		public Assignment getConditionAssignment_5() { return cConditionAssignment_5; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_0() { return cConditionConditionParserRuleCall_5_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_6() { return cBEGINTerminalRuleCall_6; }
		
		//steps+=ExtensionStep+
		public Assignment getStepsAssignment_7() { return cStepsAssignment_7; }
		
		//ExtensionStep
		public RuleCall getStepsExtensionStepParserRuleCall_7_0() { return cStepsExtensionStepParserRuleCall_7_0; }
		
		//(INT '.' 'RETURN' 'TO' resumeAt=INT | end=DeadEndStep)
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//INT '.' 'RETURN' 'TO' resumeAt=INT
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_8_0_0() { return cINTTerminalRuleCall_8_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_8_0_1() { return cFullStopKeyword_8_0_1; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_8_0_2() { return cRETURNKeyword_8_0_2; }
		
		//'TO'
		public Keyword getTOKeyword_8_0_3() { return cTOKeyword_8_0_3; }
		
		//resumeAt=INT
		public Assignment getResumeAtAssignment_8_0_4() { return cResumeAtAssignment_8_0_4; }
		
		//INT
		public RuleCall getResumeAtINTTerminalRuleCall_8_0_4_0() { return cResumeAtINTTerminalRuleCall_8_0_4_0; }
		
		//end=DeadEndStep
		public Assignment getEndAssignment_8_1() { return cEndAssignment_8_1; }
		
		//DeadEndStep
		public RuleCall getEndDeadEndStepParserRuleCall_8_1_0() { return cEndDeadEndStepParserRuleCall_8_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUseCaseStepParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtensionStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Steps
		//Step:
		//	UseCaseStep | ExtensionStep;
		@Override public ParserRule getRule() { return rule; }
		
		//UseCaseStep | ExtensionStep
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UseCaseStep
		public RuleCall getUseCaseStepParserRuleCall_0() { return cUseCaseStepParserRuleCall_0; }
		
		//ExtensionStep
		public RuleCall getExtensionStepParserRuleCall_1() { return cExtensionStepParserRuleCall_1; }
	}
	public class UseCaseStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.UseCaseStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUserStepAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cUSERKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSentenceAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSentenceLongNameParserRuleCall_0_4_0 = (RuleCall)cSentenceAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSystemStepAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cSYSTEMKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSentenceAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSentenceLongNameParserRuleCall_1_4_0 = (RuleCall)cSentenceAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRepeatingStepAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cWHILEKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRepeatingConditionAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cRepeatingConditionConditionParserRuleCall_2_4_0 = (RuleCall)cRepeatingConditionAssignment_2_4.eContents().get(0);
		
		//UseCaseStep:
		//	{UserStep} name=INT '.' 'USER' sentence=LongName | {SystemStep} name=INT '.' 'SYSTEM' sentence=LongName |
		//	{RepeatingStep} name=INT '.' 'WHILE' repeatingCondition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//{UserStep} name=INT '.' 'USER' sentence=LongName | {SystemStep} name=INT '.' 'SYSTEM' sentence=LongName |
		//{RepeatingStep} name=INT '.' 'WHILE' repeatingCondition=Condition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UserStep} name=INT '.' 'USER' sentence=LongName
		public Group getGroup_0() { return cGroup_0; }
		
		//{UserStep}
		public Action getUserStepAction_0_0() { return cUserStepAction_0_0; }
		
		//name=INT
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0_1_0() { return cNameINTTerminalRuleCall_0_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//'USER'
		public Keyword getUSERKeyword_0_3() { return cUSERKeyword_0_3; }
		
		//sentence=LongName
		public Assignment getSentenceAssignment_0_4() { return cSentenceAssignment_0_4; }
		
		//LongName
		public RuleCall getSentenceLongNameParserRuleCall_0_4_0() { return cSentenceLongNameParserRuleCall_0_4_0; }
		
		//{SystemStep} name=INT '.' 'SYSTEM' sentence=LongName
		public Group getGroup_1() { return cGroup_1; }
		
		//{SystemStep}
		public Action getSystemStepAction_1_0() { return cSystemStepAction_1_0; }
		
		//name=INT
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_1_0() { return cNameINTTerminalRuleCall_1_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//'SYSTEM'
		public Keyword getSYSTEMKeyword_1_3() { return cSYSTEMKeyword_1_3; }
		
		//sentence=LongName
		public Assignment getSentenceAssignment_1_4() { return cSentenceAssignment_1_4; }
		
		//LongName
		public RuleCall getSentenceLongNameParserRuleCall_1_4_0() { return cSentenceLongNameParserRuleCall_1_4_0; }
		
		//{RepeatingStep} name=INT '.' 'WHILE' repeatingCondition=Condition
		public Group getGroup_2() { return cGroup_2; }
		
		//{RepeatingStep}
		public Action getRepeatingStepAction_2_0() { return cRepeatingStepAction_2_0; }
		
		//name=INT
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_2_1_0() { return cNameINTTerminalRuleCall_2_1_0; }
		
		//'.'
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_2_3() { return cWHILEKeyword_2_3; }
		
		//repeatingCondition=Condition
		public Assignment getRepeatingConditionAssignment_2_4() { return cRepeatingConditionAssignment_2_4; }
		
		//Condition
		public RuleCall getRepeatingConditionConditionParserRuleCall_2_4_0() { return cRepeatingConditionConditionParserRuleCall_2_4_0; }
	}
	public class ExtensionStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.ExtensionStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameINTTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cUSERKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cSYSTEMKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Keyword cWHILEKeyword_0_2_2 = (Keyword)cAlternatives_0_2.eContents().get(2);
		private final Assignment cSentenceAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSentenceLongNameParserRuleCall_0_3_0 = (RuleCall)cSentenceAssignment_0_3.eContents().get(0);
		private final RuleCall cDeadEndStepParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////I dont know how to use this shit
		//ExtensionStep:
		//	name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName | DeadEndStep;
		@Override public ParserRule getRule() { return rule; }
		
		//name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName | DeadEndStep
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName
		public Group getGroup_0() { return cGroup_0; }
		
		//name=INT
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0_0_0() { return cNameINTTerminalRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//('USER' | 'SYSTEM' | 'WHILE')?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'USER'
		public Keyword getUSERKeyword_0_2_0() { return cUSERKeyword_0_2_0; }
		
		//'SYSTEM'
		public Keyword getSYSTEMKeyword_0_2_1() { return cSYSTEMKeyword_0_2_1; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_0_2_2() { return cWHILEKeyword_0_2_2; }
		
		//sentence=LongName
		public Assignment getSentenceAssignment_0_3() { return cSentenceAssignment_0_3; }
		
		//LongName
		public RuleCall getSentenceLongNameParserRuleCall_0_3_0() { return cSentenceLongNameParserRuleCall_0_3_0; }
		
		//DeadEndStep
		public RuleCall getDeadEndStepParserRuleCall_1() { return cDeadEndStepParserRuleCall_1; }
	}
	public class DeadEndStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.DeadEndStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameINTTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cUSERKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cSYSTEMKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cWHILEKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Assignment cSentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentenceLongNameParserRuleCall_3_0 = (RuleCall)cSentenceAssignment_3.eContents().get(0);
		private final Keyword cUCKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cENDKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DeadEndStep:
		//	name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName? 'UC' 'END';
		@Override public ParserRule getRule() { return rule; }
		
		//name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName? 'UC' 'END'
		public Group getGroup() { return cGroup; }
		
		//name=INT
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_0_0() { return cNameINTTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//('USER' | 'SYSTEM' | 'WHILE')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'USER'
		public Keyword getUSERKeyword_2_0() { return cUSERKeyword_2_0; }
		
		//'SYSTEM'
		public Keyword getSYSTEMKeyword_2_1() { return cSYSTEMKeyword_2_1; }
		
		//'WHILE'
		public Keyword getWHILEKeyword_2_2() { return cWHILEKeyword_2_2; }
		
		//sentence=LongName?
		public Assignment getSentenceAssignment_3() { return cSentenceAssignment_3; }
		
		//LongName
		public RuleCall getSentenceLongNameParserRuleCall_3_0() { return cSentenceLongNameParserRuleCall_3_0; }
		
		//'UC'
		public Keyword getUCKeyword_4() { return cUCKeyword_4; }
		
		//'END'
		public Keyword getENDKeyword_5() { return cENDKeyword_5; }
	}
	public class PreconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Precondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRECONDITIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		////Conditions
		//Precondition:
		//	'PRECONDITION' ':' condition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'PRECONDITION' ':' condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'PRECONDITION'
		public Keyword getPRECONDITIONKeyword_0() { return cPRECONDITIONKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
	}
	public class PostconditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Postcondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPOSTCONDITIONKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Postcondition:
		//	'POSTCONDITION' ':' condition=Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//'POSTCONDITION' ':' condition=Condition
		public Group getGroup() { return cGroup; }
		
		//'POSTCONDITION'
		public Keyword getPOSTCONDITIONKeyword_0() { return cPOSTCONDITIONKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=Condition
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_2_0() { return cConditionConditionParserRuleCall_2_0; }
	}
	public class LongNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cQuotationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cApostropheKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		///**********************	}
		//******* DataTypes *****
		//***********************/ LongName:
		//	(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'")+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'")+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
		
		//CHAR
		public RuleCall getCHARTerminalRuleCall_2() { return cCHARTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_5() { return cQuotationMarkKeyword_5; }
		
		//"'"
		public Keyword getApostropheKeyword_6() { return cApostropheKeyword_6; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFullStopKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cQuotationMarkKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cApostropheKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cANDKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cORKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//Condition:
		//	(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'" | 'AND' | 'OR')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'" | 'AND' | 'OR')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1() { return cANY_OTHERTerminalRuleCall_1; }
		
		//CHAR
		public RuleCall getCHARTerminalRuleCall_2() { return cCHARTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'.'
		public Keyword getFullStopKeyword_4() { return cFullStopKeyword_4; }
		
		//'"'
		public Keyword getQuotationMarkKeyword_5() { return cQuotationMarkKeyword_5; }
		
		//"'"
		public Keyword getApostropheKeyword_6() { return cApostropheKeyword_6; }
		
		//'AND'
		public Keyword getANDKeyword_7() { return cANDKeyword_7; }
		
		//'OR'
		public Keyword getORKeyword_8() { return cORKeyword_8; }
	}
	
	
	private final UseCaseElements pUseCase;
	private final ExtensionElements pExtension;
	private final StepElements pStep;
	private final UseCaseStepElements pUseCaseStep;
	private final ExtensionStepElements pExtensionStep;
	private final DeadEndStepElements pDeadEndStep;
	private final PreconditionElements pPrecondition;
	private final PostconditionElements pPostcondition;
	private final LongNameElements pLongName;
	private final ConditionElements pCondition;
	private final TerminalRule tCHAR;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCase = new UseCaseElements();
		this.pExtension = new ExtensionElements();
		this.pStep = new StepElements();
		this.pUseCaseStep = new UseCaseStepElements();
		this.pExtensionStep = new ExtensionStepElements();
		this.pDeadEndStep = new DeadEndStepElements();
		this.pPrecondition = new PreconditionElements();
		this.pPostcondition = new PostconditionElements();
		this.pLongName = new LongNameElements();
		this.pCondition = new ConditionElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.CHAR");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("useCase.xtext.useCaseDsl.UseCaseDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Use case structure
	//UseCase hidden(WS):
	//	'UC' number=INT ':' name=LongName precondition=Precondition?
	//	postcondition=Postcondition?
	//	mainflow='MAINFLOW' ':'
	//	BEGIN
	//	steps+=UseCaseStep+
	//	END (declareofflow='ALTERNATIVEFLOW' ':'
	//	BEGIN
	//	alternativeflows+=Extension+
	//	END)?;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	////Flows and behavorial
	//Extension:
	//	startFrom=INT '.' name=CHAR '.' 'IF' condition=Condition BEGIN
	//	steps+=ExtensionStep+ (INT '.' 'RETURN' 'TO' resumeAt=INT | end=DeadEndStep) END;
	public ExtensionElements getExtensionAccess() {
		return pExtension;
	}
	
	public ParserRule getExtensionRule() {
		return getExtensionAccess().getRule();
	}
	
	////Steps
	//Step:
	//	UseCaseStep | ExtensionStep;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//UseCaseStep:
	//	{UserStep} name=INT '.' 'USER' sentence=LongName | {SystemStep} name=INT '.' 'SYSTEM' sentence=LongName |
	//	{RepeatingStep} name=INT '.' 'WHILE' repeatingCondition=Condition;
	public UseCaseStepElements getUseCaseStepAccess() {
		return pUseCaseStep;
	}
	
	public ParserRule getUseCaseStepRule() {
		return getUseCaseStepAccess().getRule();
	}
	
	////I dont know how to use this shit
	//ExtensionStep:
	//	name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName | DeadEndStep;
	public ExtensionStepElements getExtensionStepAccess() {
		return pExtensionStep;
	}
	
	public ParserRule getExtensionStepRule() {
		return getExtensionStepAccess().getRule();
	}
	
	//DeadEndStep:
	//	name=INT '.' ('USER' | 'SYSTEM' | 'WHILE')? sentence=LongName? 'UC' 'END';
	public DeadEndStepElements getDeadEndStepAccess() {
		return pDeadEndStep;
	}
	
	public ParserRule getDeadEndStepRule() {
		return getDeadEndStepAccess().getRule();
	}
	
	////Conditions
	//Precondition:
	//	'PRECONDITION' ':' condition=Condition;
	public PreconditionElements getPreconditionAccess() {
		return pPrecondition;
	}
	
	public ParserRule getPreconditionRule() {
		return getPreconditionAccess().getRule();
	}
	
	//Postcondition:
	//	'POSTCONDITION' ':' condition=Condition;
	public PostconditionElements getPostconditionAccess() {
		return pPostcondition;
	}
	
	public ParserRule getPostconditionRule() {
		return getPostconditionAccess().getRule();
	}
	
	///**********************	}
	//******* DataTypes *****
	//***********************/ LongName:
	//	(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'")+;
	public LongNameElements getLongNameAccess() {
		return pLongName;
	}
	
	public ParserRule getLongNameRule() {
		return getLongNameAccess().getRule();
	}
	
	//Condition:
	//	(ID | ANY_OTHER | CHAR | ':' | '.' | '"' | "'" | 'AND' | 'OR')+;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//terminal CHAR:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
