/**
 * generated by Xtext 2.21.0
 */
package ucwriter.xtext.guimeta.ucdsl.uCdsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import ucwriter.xtext.guimeta.ucdsl.uCdsl.Extension;
import ucwriter.xtext.guimeta.ucdsl.uCdsl.Postcondition;
import ucwriter.xtext.guimeta.ucdsl.uCdsl.Precondition;
import ucwriter.xtext.guimeta.ucdsl.uCdsl.UCdslPackage;
import ucwriter.xtext.guimeta.ucdsl.uCdsl.UseCase;
import ucwriter.xtext.guimeta.ucdsl.uCdsl.UseCaseStep;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Use Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getNumber <em>Number</em>}</li>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getName <em>Name</em>}</li>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getPrecondition <em>Precondition</em>}</li>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getPostcondition <em>Postcondition</em>}</li>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getSteps <em>Steps</em>}</li>
 *   <li>{@link ucwriter.xtext.guimeta.ucdsl.uCdsl.impl.UseCaseImpl#getAlternativeflows <em>Alternativeflows</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UseCaseImpl extends MinimalEObjectImpl.Container implements UseCase
{
  /**
   * The default value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected static final int NUMBER_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getNumber() <em>Number</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNumber()
   * @generated
   * @ordered
   */
  protected int number = NUMBER_EDEFAULT;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected Precondition precondition;

  /**
   * The cached value of the '{@link #getPostcondition() <em>Postcondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPostcondition()
   * @generated
   * @ordered
   */
  protected Postcondition postcondition;

  /**
   * The cached value of the '{@link #getSteps() <em>Steps</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSteps()
   * @generated
   * @ordered
   */
  protected EList<UseCaseStep> steps;

  /**
   * The cached value of the '{@link #getAlternativeflows() <em>Alternativeflows</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlternativeflows()
   * @generated
   * @ordered
   */
  protected EList<Extension> alternativeflows;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UseCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return UCdslPackage.Literals.USE_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getNumber()
  {
    return number;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNumber(int newNumber)
  {
    int oldNumber = number;
    number = newNumber;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__NUMBER, oldNumber, number));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Precondition getPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPrecondition(Precondition newPrecondition, NotificationChain msgs)
  {
    Precondition oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__PRECONDITION, oldPrecondition, newPrecondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrecondition(Precondition newPrecondition)
  {
    if (newPrecondition != precondition)
    {
      NotificationChain msgs = null;
      if (precondition != null)
        msgs = ((InternalEObject)precondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UCdslPackage.USE_CASE__PRECONDITION, null, msgs);
      if (newPrecondition != null)
        msgs = ((InternalEObject)newPrecondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UCdslPackage.USE_CASE__PRECONDITION, null, msgs);
      msgs = basicSetPrecondition(newPrecondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__PRECONDITION, newPrecondition, newPrecondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Postcondition getPostcondition()
  {
    return postcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPostcondition(Postcondition newPostcondition, NotificationChain msgs)
  {
    Postcondition oldPostcondition = postcondition;
    postcondition = newPostcondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__POSTCONDITION, oldPostcondition, newPostcondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPostcondition(Postcondition newPostcondition)
  {
    if (newPostcondition != postcondition)
    {
      NotificationChain msgs = null;
      if (postcondition != null)
        msgs = ((InternalEObject)postcondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - UCdslPackage.USE_CASE__POSTCONDITION, null, msgs);
      if (newPostcondition != null)
        msgs = ((InternalEObject)newPostcondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - UCdslPackage.USE_CASE__POSTCONDITION, null, msgs);
      msgs = basicSetPostcondition(newPostcondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, UCdslPackage.USE_CASE__POSTCONDITION, newPostcondition, newPostcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<UseCaseStep> getSteps()
  {
    if (steps == null)
    {
      steps = new EObjectContainmentEList<UseCaseStep>(UseCaseStep.class, this, UCdslPackage.USE_CASE__STEPS);
    }
    return steps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Extension> getAlternativeflows()
  {
    if (alternativeflows == null)
    {
      alternativeflows = new EObjectContainmentEList<Extension>(Extension.class, this, UCdslPackage.USE_CASE__ALTERNATIVEFLOWS);
    }
    return alternativeflows;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case UCdslPackage.USE_CASE__PRECONDITION:
        return basicSetPrecondition(null, msgs);
      case UCdslPackage.USE_CASE__POSTCONDITION:
        return basicSetPostcondition(null, msgs);
      case UCdslPackage.USE_CASE__STEPS:
        return ((InternalEList<?>)getSteps()).basicRemove(otherEnd, msgs);
      case UCdslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return ((InternalEList<?>)getAlternativeflows()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case UCdslPackage.USE_CASE__NUMBER:
        return getNumber();
      case UCdslPackage.USE_CASE__NAME:
        return getName();
      case UCdslPackage.USE_CASE__PRECONDITION:
        return getPrecondition();
      case UCdslPackage.USE_CASE__POSTCONDITION:
        return getPostcondition();
      case UCdslPackage.USE_CASE__STEPS:
        return getSteps();
      case UCdslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return getAlternativeflows();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case UCdslPackage.USE_CASE__NUMBER:
        setNumber((Integer)newValue);
        return;
      case UCdslPackage.USE_CASE__NAME:
        setName((String)newValue);
        return;
      case UCdslPackage.USE_CASE__PRECONDITION:
        setPrecondition((Precondition)newValue);
        return;
      case UCdslPackage.USE_CASE__POSTCONDITION:
        setPostcondition((Postcondition)newValue);
        return;
      case UCdslPackage.USE_CASE__STEPS:
        getSteps().clear();
        getSteps().addAll((Collection<? extends UseCaseStep>)newValue);
        return;
      case UCdslPackage.USE_CASE__ALTERNATIVEFLOWS:
        getAlternativeflows().clear();
        getAlternativeflows().addAll((Collection<? extends Extension>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case UCdslPackage.USE_CASE__NUMBER:
        setNumber(NUMBER_EDEFAULT);
        return;
      case UCdslPackage.USE_CASE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case UCdslPackage.USE_CASE__PRECONDITION:
        setPrecondition((Precondition)null);
        return;
      case UCdslPackage.USE_CASE__POSTCONDITION:
        setPostcondition((Postcondition)null);
        return;
      case UCdslPackage.USE_CASE__STEPS:
        getSteps().clear();
        return;
      case UCdslPackage.USE_CASE__ALTERNATIVEFLOWS:
        getAlternativeflows().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case UCdslPackage.USE_CASE__NUMBER:
        return number != NUMBER_EDEFAULT;
      case UCdslPackage.USE_CASE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case UCdslPackage.USE_CASE__PRECONDITION:
        return precondition != null;
      case UCdslPackage.USE_CASE__POSTCONDITION:
        return postcondition != null;
      case UCdslPackage.USE_CASE__STEPS:
        return steps != null && !steps.isEmpty();
      case UCdslPackage.USE_CASE__ALTERNATIVEFLOWS:
        return alternativeflows != null && !alternativeflows.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (number: ");
    result.append(number);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //UseCaseImpl
