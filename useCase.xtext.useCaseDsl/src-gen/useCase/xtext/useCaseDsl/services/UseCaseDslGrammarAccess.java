/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UseCaseDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UseCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.UseCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameLongNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cMainflowAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMainflowMainFlowParserRuleCall_4_0 = (RuleCall)cMainflowAssignment_4.eContents().get(0);
		
		//UseCase:
		//	'UC' number=INT ':' name+=LongName+
		//	mainflow=MainFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//'UC' number=INT ':' name+=LongName+ mainflow=MainFlow
		public Group getGroup() { return cGroup; }
		
		//'UC'
		public Keyword getUCKeyword_0() { return cUCKeyword_0; }
		
		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//name+=LongName+
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//LongName
		public RuleCall getNameLongNameParserRuleCall_3_0() { return cNameLongNameParserRuleCall_3_0; }
		
		//mainflow=MainFlow
		public Assignment getMainflowAssignment_4() { return cMainflowAssignment_4; }
		
		//MainFlow
		public RuleCall getMainflowMainFlowParserRuleCall_4_0() { return cMainflowMainFlowParserRuleCall_4_0; }
	}
	public class MainFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.MainFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainFlowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMainFlowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStepsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStepsStepParserRuleCall_4_0 = (RuleCall)cStepsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//MainFlow:
		//	{MainFlow} 'MainFlow' ':'
		//	BEGIN
		//	steps+=Step+
		//	END;
		@Override public ParserRule getRule() { return rule; }
		
		//{MainFlow} 'MainFlow' ':' BEGIN steps+=Step+ END
		public Group getGroup() { return cGroup; }
		
		//{MainFlow}
		public Action getMainFlowAction_0() { return cMainFlowAction_0; }
		
		//'MainFlow'
		public Keyword getMainFlowKeyword_1() { return cMainFlowKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//steps+=Step+
		public Assignment getStepsAssignment_4() { return cStepsAssignment_4; }
		
		//Step
		public RuleCall getStepsStepParserRuleCall_4_0() { return cStepsStepParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.Step");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeUserStepParserRuleCall_2_0_0 = (RuleCall)cTypeAlternatives_2_0.eContents().get(0);
		private final RuleCall cTypeSystemStepParserRuleCall_2_0_1 = (RuleCall)cTypeAlternatives_2_0.eContents().get(1);
		private final Assignment cSentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSentenceLongNameParserRuleCall_3_0 = (RuleCall)cSentenceAssignment_3.eContents().get(0);
		
		//Step:
		//	{Step} name=INT type=(UserStep | SystemStep /*|ExtensionStep*/) sentence+=LongName+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Step} name=INT type=(UserStep | SystemStep /*|ExtensionStep*/) sentence+=LongName+
		public Group getGroup() { return cGroup; }
		
		//{Step}
		public Action getStepAction_0() { return cStepAction_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
		
		//type=(UserStep | SystemStep /*|ExtensionStep*/)
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//(UserStep | SystemStep /*|ExtensionStep*/)
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//UserStep
		public RuleCall getTypeUserStepParserRuleCall_2_0_0() { return cTypeUserStepParserRuleCall_2_0_0; }
		
		//SystemStep
		public RuleCall getTypeSystemStepParserRuleCall_2_0_1() { return cTypeSystemStepParserRuleCall_2_0_1; }
		
		//sentence+=LongName+
		public Assignment getSentenceAssignment_3() { return cSentenceAssignment_3; }
		
		//LongName
		public RuleCall getSentenceLongNameParserRuleCall_3_0() { return cSentenceLongNameParserRuleCall_3_0; }
	}
	public class UserStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.UserStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUserStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cUserKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//UserStep:
		//	{UserStep} '.' 'User';
		@Override public ParserRule getRule() { return rule; }
		
		//{UserStep} '.' 'User'
		public Group getGroup() { return cGroup; }
		
		//{UserStep}
		public Action getUserStepAction_0() { return cUserStepAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'User'
		public Keyword getUserKeyword_2() { return cUserKeyword_2; }
	}
	public class SystemStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.SystemStep");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSystemStepAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSystemKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SystemStep:
		//	{SystemStep} '.' 'System';
		@Override public ParserRule getRule() { return rule; }
		
		//{SystemStep} '.' 'System'
		public Group getGroup() { return cGroup; }
		
		//{SystemStep}
		public Action getSystemStepAction_0() { return cSystemStepAction_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//'System'
		public Keyword getSystemKeyword_2() { return cSystemKeyword_2; }
	}
	public class LongNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.LongName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cANY_OTHERTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cCHARTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cColonKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Keyword cFullStopKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		///************************** V 0.2 **************************************************** 
		//ExtensionStep:
		//	(startAt = [Step]) '.' name = CHAR '.';
		//
		//Extension:
		//	{Extension} 'AlternativeFlow:'
		//	BEGIN
		//		(steps += Step)*
		//	END;
		//***************************************************************************************/ /**********************	
		//******* DataTypes *****
		//***********************/ LongName:
		//	(ID | ANY_OTHER | CHAR | ':' | '.') WS?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | ANY_OTHER | CHAR | ':' | '.') WS?
		public Group getGroup() { return cGroup; }
		
		//(ID | ANY_OTHER | CHAR | ':' | '.')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0_1() { return cANY_OTHERTerminalRuleCall_0_1; }
		
		//CHAR
		public RuleCall getCHARTerminalRuleCall_0_2() { return cCHARTerminalRuleCall_0_2; }
		
		//':'
		public Keyword getColonKeyword_0_3() { return cColonKeyword_0_3; }
		
		//'.'
		public Keyword getFullStopKeyword_0_4() { return cFullStopKeyword_0_4; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
	}
	
	
	private final UseCaseElements pUseCase;
	private final MainFlowElements pMainFlow;
	private final StepElements pStep;
	private final UserStepElements pUserStep;
	private final SystemStepElements pSystemStep;
	private final LongNameElements pLongName;
	private final TerminalRule tCHAR;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UseCaseDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUseCase = new UseCaseElements();
		this.pMainFlow = new MainFlowElements();
		this.pStep = new StepElements();
		this.pUserStep = new UserStepElements();
		this.pSystemStep = new SystemStepElements();
		this.pLongName = new LongNameElements();
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.CHAR");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "useCase.xtext.useCaseDsl.UseCaseDsl.END");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("useCase.xtext.useCaseDsl.UseCaseDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UseCase:
	//	'UC' number=INT ':' name+=LongName+
	//	mainflow=MainFlow;
	public UseCaseElements getUseCaseAccess() {
		return pUseCase;
	}
	
	public ParserRule getUseCaseRule() {
		return getUseCaseAccess().getRule();
	}
	
	//MainFlow:
	//	{MainFlow} 'MainFlow' ':'
	//	BEGIN
	//	steps+=Step+
	//	END;
	public MainFlowElements getMainFlowAccess() {
		return pMainFlow;
	}
	
	public ParserRule getMainFlowRule() {
		return getMainFlowAccess().getRule();
	}
	
	//Step:
	//	{Step} name=INT type=(UserStep | SystemStep /*|ExtensionStep*/) sentence+=LongName+;
	public StepElements getStepAccess() {
		return pStep;
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}
	
	//UserStep:
	//	{UserStep} '.' 'User';
	public UserStepElements getUserStepAccess() {
		return pUserStep;
	}
	
	public ParserRule getUserStepRule() {
		return getUserStepAccess().getRule();
	}
	
	//SystemStep:
	//	{SystemStep} '.' 'System';
	public SystemStepElements getSystemStepAccess() {
		return pSystemStep;
	}
	
	public ParserRule getSystemStepRule() {
		return getSystemStepAccess().getRule();
	}
	
	///************************** V 0.2 **************************************************** 
	//ExtensionStep:
	//	(startAt = [Step]) '.' name = CHAR '.';
	//
	//Extension:
	//	{Extension} 'AlternativeFlow:'
	//	BEGIN
	//		(steps += Step)*
	//	END;
	//***************************************************************************************/ /**********************	
	//******* DataTypes *****
	//***********************/ LongName:
	//	(ID | ANY_OTHER | CHAR | ':' | '.') WS?;
	public LongNameElements getLongNameAccess() {
		return pLongName;
	}
	
	public ParserRule getLongNameRule() {
		return getLongNameAccess().getRule();
	}
	
	//terminal CHAR:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getCHARRule() {
		return tCHAR;
	}
	
	//terminal BEGIN:
	//	'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END:
	//	'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
