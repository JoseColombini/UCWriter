/*
 * generated by Xtext 2.20.0
 */
package useCase.xtext.useCaseDsl.validation;

import java.util.Iterator;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

import useCase.xtext.useCaseDsl.useCaseDsl.RepeatingStep;
import useCase.xtext.useCaseDsl.useCaseDsl.Step;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCase;
import useCase.xtext.useCaseDsl.useCaseDsl.UseCaseDslPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class UseCaseDslValidator extends AbstractUseCaseDslValidator {
	
	public static final String INVALID_NAME = "invalidName";

	@Check
	public void checkStepNameAreCorrect(Step step) {
		int i = 0;
		EObject parent = step.eContainer();
		while(parent instanceof Step) {
				i = i + 1;
			parent = parent.eContainer();
		}
		if (step.getName().length() > 2*(i + 1)) {
				warning("Step name should be shorter",
						UseCaseDslPackage.Literals.STEP__NAME,
						INVALID_NAME);	
		}
		if (step.getName().length() < 2*(i + 1)) {
			warning("Step name should be longer",
					UseCaseDslPackage.Literals.STEP__NAME,
					INVALID_NAME);	
		}
		parent = step.eContainer();
		if(!step.getName().substring(0, 2*i - 1).equals(((Step)parent).getName().substring(0,2*i - 1))) {
			warning("StepName incorrect",
					UseCaseDslPackage.Literals.STEP__NAME,
					INVALID_NAME);
		}
		
		List<Step> compare = EcoreUtil2.getAllContentsOfType(parent, Step.class);
		Iterator<Step> it = compare.iterator();
		i = 0;
		
		while(it.hasNext()) {
			Step a = (Step) it.next();
			if(a.getName().equals(step.getName())) {
				i = i + 1;
			}
			if(i > 1) {
				warning("Step name are not unique in context",
						UseCaseDslPackage.Literals.STEP__NAME,
						INVALID_NAME);
			}
		}
	}
	
	
	
	
}
